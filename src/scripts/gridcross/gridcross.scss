@import '../../styles/settings';
@import '../../styles/utils/breakpoints';

$asset-url: 'https://umimematiku.cz/files/mrizkovana/';
//$primary-color: map-get($colors, primary);
$primary-color: #31BD60;
$task-color: map-get($apps, 'english');

@font-face {
    font-family: 'umime-to-gridcross';
    src: url($asset-url + 'umime-to.eot?cgqr3h');
    src: url($asset-url + 'umime-to.eot?cgqr3h#iefix') format('embedded-opentype'),
    url($asset-url + 'umime-to.ttf?cgqr3h') format('truetype'),
    url($asset-url + 'umime-to.woff?cgqr3h') format('woff'),
    url($asset-url + 'umime-to.svg?cgqr3h#umime-to') format('svg');
    font-weight: normal;
    font-style: normal;
}

#gridcross {
    $transition: fill $lightning-speed $default-easing,
    stroke $lightning-speed $default-easing;
    $flash-time: 0.35s;
    $solved-flash-time: 0.55s;
    $flash-easing: cubic-bezier(0,0,0,0.7);

    margin: 0 auto;
    padding: 1rem 0;
    font-size: $font-size;
    line-height: 1.5;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: transparent;

    .task-copy {
        text-align: center;
        margin: 0 auto $vertical-padding * 2;
        max-width: 320px;
        min-height: 3rem;
    }

    #canvas-wrapper {
        background: url($asset-url + 'gridcross-background.jpg') blanchedalmond 55% 50%;
        background-size: cover;
        border-radius: $border-radius;
        box-shadow: $soft-shadow, 0 2px 7px 0 rgba(0,0,0,.08);
        box-sizing: content-box;
        margin: 0 auto;
        width: fit-content;
        position: relative;
    }

    #canvas {
        background: rgba($white, 0.65);
        border-radius: inherit;
        box-sizing: border-box;
        display: block;

        .touchsurface {
            fill: transparent;
        }

        path,
        line {
            stroke-linecap: round;
            stroke-width: 1;
            stroke: $medium-gray;
            pointer-events: none;

            &.taskline {
                stroke: $task-color;
                stroke-width: 3;
                pointer-events: auto;
            }

            &.userline,
            &.selectedline {
                stroke: $black;
                stroke-width: 3;
            }

            &.solvedline {
                animation: $fast-speed $fadein-easing solved-path forwards;
            }

            &.flashline {
                pointer-events: none;
                animation: $flash-time $flash-easing flash-selected-line forwards;

                &.solvedline {
                    animation: $solved-flash-time $flash-easing flash-solved-line forwards;
                }
            }
        }

        .node {
            fill: transparent;
            transition: $transition;

            &.tasknode {
                stroke: $task-color;
                fill: $white;
                stroke-width: 2;
            }

            &.usernode,
            &.selectednode {
                stroke: $black;
                fill: $white;
            }

            &.selectednode {
                stroke-width: 2.5;
            }

            &.usernode.solvednode,
            &.tasknode.solvednode,
            &.selectednode.solvednode {
                animation: $fast-speed $fadein-easing solved-node forwards;
            }

            &.flashnode {
                pointer-events: none;
                animation: $flash-time $flash-easing flash-selected-node forwards;

                &.solvednode {
                    animation: $solved-flash-time $flash-easing flash-solved-node forwards;
                }
            }
        }

        circle.indicator {
            fill: $white;
            stroke-width: 1;
            stroke: $black;
            transition: $transition;

            &.snapped {
                stroke: map-get($colors, secondary);
            }
        }

        line.indicator {
            stroke-width: 3;
            stroke: $black;
            transition: $transition;

            &.crosshair {
                stroke-width: 1;
                stroke: rgba($black, 0.5);

                &.snapped {
                    stroke: rgba(map-get($colors, secondary), 0.75);
                }

                @include breakpoint(large) {
                    stroke-width: 0;
                }
            }

            &.snapped {
                stroke: map-get($colors, secondary);
            }
        }

        .label {
            pointer-events: none;
            font-size: $font-size;
            font-weight: $font-weight-bold;
            fill: $task-color;
        }

        .no-pointer-events {
            pointer-events: none !important;
        }
    }

    .button-wrapper {
        display: flex;
        margin: ($button-vertical-padding * 2.25 + $font-size * $line-height) / -2 auto 0;
        justify-content: center;
        align-items: center;
        position: relative;
    }

    .undo-button:before {
        font-family: 'umime-to-gridcross';
        content: "\e908";
    }

    .undo-button,
    .next-button {
        background-color: $white;
        border: none;
        border-radius: $button-border-radius;
        box-shadow: $soft-shadow;
        padding: $large-button-padding;
        transition: $button-transition, transform $lightning-speed $default-easing;
        outline: none;
        margin: 0 0.5rem;
        min-height: 2.75rem;
        font-size: $font-size;
        text-transform: none;
        -webkit-appearance: button;

        &:disabled {
            background-color: #F9FBFB;
            color: $medium-gray;
        }

        &:not(:disabled):hover,
        &:not(:disabled):active {
            transform: scale(1.0625);
            cursor: pointer;
        }

        &.next-button:not(:disabled) {
            background-color: $primary-color;
            color: $white;
            animation: 0.5s 1 aura-success;

            &:hover,
            &:active {
                background-color: scale-color($primary-color, $lightness: -15%);
            }
        }
    }

    .button-flash {
        animation: 0.85s 1 aura;
    }

    .loading-indicator {
        border-radius: $border-radius;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;

        &:after {
            content: '';
            background-color: $primary-color;
            display: block;
            width: 3rem;
            height: 3rem;
            border-radius: $border-radius / 2;
            animation: sk-rotateplane 1.2s infinite ease-in-out;
        }
    }

    #local-io {
        margin: $vertical-padding * 3 auto 0;
        width: 340px;
        position: relative;

        #local-io-input {
            box-shadow: none;
            border: 0.0625rem solid $border-gray;
            border-radius: $button-border-radius;
            width: 340px;
            min-width: 340px;
            max-width: 340px;
            min-height: 2.5rem;
            height: 2.5rem;
            font-family: $font-family-monospace;
            font-size: $small-font-size;
            padding: $button-vertical-padding $button-horizontal-padding * 0.75;

            &:focus {
                border-color: rgba($task-color, 0.5);
                box-shadow: 0 0 0 0.125rem rgba($task-color, 0.2);
                outline: none;
            }
        }

        #local-io-apply-button {
            background: $light-gray;
            border: none;
            border-radius: $ultimate-border-radius;
            padding: 0.125rem 0.375rem;
            width: 1.75rem;
            height: 1.75rem;
            position: absolute;
            top: 0.375rem;
            right: 0.375rem;
            outline: none;

            &:before {
                font-family: 'umime-to-gridcross';
                content: "\e902";
            }
        }
    }

    @keyframes flash-selected-line {
        0% {
            stroke: rgba(map-get($colors, secondary), 0.5);
        }
        100% {
            stroke: rgba(map-get($colors, secondary), 0);
            stroke-width: 16;
        }
    }

    @keyframes flash-solved-line {
        0% {
            stroke: rgba($primary-color, 0.5);
        }
        100% {
            stroke: rgba($primary-color, 0);
            stroke-width: 16;
        }
    }

    @keyframes flash-selected-node {
        0% {
            stroke: rgba(map-get($colors, secondary), 0.5);
        }
        100% {
            stroke: rgba(map-get($colors, secondary), 0);
            stroke-width: 24;
        }
    }

    @keyframes flash-solved-node {
        0% {
            stroke: rgba($primary-color, 0.5);
        }
        100% {
            stroke: rgba($primary-color, 0);
            stroke-width: 24;
        }
    }

    @keyframes solved-path {
        0% {
            stroke: $black;
        }
        100% {
            stroke: $primary-color;
            stroke-width: 4;
        }
    }

    @keyframes solved-node {
        0% {
            stroke: $black;
        }
        100% {
            stroke: $primary-color;
            stroke-width: 2;
        }
    }

    @keyframes aura {
        0% {
            background-color: scale-color($task-color, $lightness: 90%);
            box-shadow: 0 0 0 0 rgba($task-color, 0.5),
            $soft-shadow;
            color: $task-color;
        }

        50% {
            box-shadow: 0 0 0 0.5rem rgba($task-color, 0),
            $soft-shadow;
            color: $task-color;
        }
    }

    @keyframes aura-success {
        from {
            box-shadow: 0 0 0 0 rgba($primary-color, 0.75),
            $soft-shadow;
        }

        to {
            box-shadow: 0 0 0 0.5rem rgba($primary-color, 0),
            $soft-shadow;
        }
    }

    // from http://tobiasahlin.com/spinkit/
    @keyframes sk-rotateplane {
        0% {
            transform: perspective(120px) rotateX(0deg) rotateY(0deg);
        }
        50% {
            transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);
        }
        100% {
            transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
        }
    }
}
